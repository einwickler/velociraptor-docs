name: Windows.ActiveDirectory.ADTimeline
description: |
  Runs ADTimeline from ANSSI-FR: "Timeline of Active Directory changes 
  with replication metadata"
  https://github.com/ANSSI-FR/ADTimeline

author: Jannik Stuckst√§tte - @einwickler

type: CLIENT

tools:
  - name: ADTimeline
    url: https://github.com/ANSSI-FR/ADTimeline/archive/refs/heads/master.zip

precondition: |
    SELECT * From foreach(row={
        SELECT OS FROM info() 
        WHERE OS = 'windows'
    }, query={
        SELECT OS, `Computer Info`.DomainRole AS Role
        FROM Artifact.Generic.Client.Info()
        WHERE _Source = 'Generic.Client.Info/WindowsInfo'
        AND Role =~ 'Domain Controller'
    })     

sources:
    - name: Timeline
      query: |
        LET WorkDir <= tempdir(remove_last='Y')
    
        LET Toolzip <= SELECT FullPath
        FROM Artifact.Generic.Utils.FetchBinary(ToolName="ADTimeline",
                                                 IsExecutable=FALSE)
           
        LET _ <= SELECT *
        FROM unzip(filename=Toolzip.FullPath, output_directory=WorkDir)
           
        LET ADTimelineScript <= path_join(
            components=[WorkDir, 'ADTimeline-master', 'ADTimeline.ps1'],
            path_type='windows')
           
        LET ExecOut <= SELECT * FROM execve(
            argv=['powershell', '-ExecutionPolicy', 'Bypass', '-NoProfile', 
            '-Command',
            'Set-Location "' + WorkDir + '"; ' + '.\\ADTimeline-master\\ADTimeline.ps1'],
            sep="\n")
            
        
        LET _ <= SELECT * FROM scope()
            where log(message="ADTimeline Stdout:")
        
        LET _ <= SELECT * FROM ExecOut
            WHERE log(message=Stdout)
            
        LET _ <= log(message="ADTimeline Stderr:")
    
        LET _ <= SELECT * FROM ExecOut
            WHERE log(message=Stderr)
            
        LET LogFiles <= SELECT *, upload(file=OSPath) FROM glob(globs="logfile_*.log", 
            root=WorkDir)
            
        LET LogFileContent <= read_file(filename=LogFiles[0].OSPath, 
            length=atoi(string=LogFiles[0].Size))
            
        LET _ <= SELECT * FROM scope()
            where log(message="Logfile output:")
        
        LET _ <= SELECT _value as Line 
            FROM foreach(row=split(string=LogFileContent, sep="\n"))
            WHERE log(message=Line)
        
        LET TimelineFiles <= SELECT OSPath, upload(file=OSPath) AS Upload
            FROM glob(globs="timeline_*.csv", root=WorkDir)
        
        LET _ <= SELECT OSPath, upload(file=OSPath) AS Upload
            FROM glob(globs="*ADobjects_*.xml", root=WorkDir)
           
        SELECT * FROM parse_csv(filename=TimelineFiles[0].OSPath, separator=';')